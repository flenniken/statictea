* StaticTea

** A template processor and language. 

StaticTea combines a template with data to produce a result. 

Example template:

#+BEGIN_SRC
<!--$ nextline -->
hello {name}
#+END_SRC

The associated json data:

#+BEGIN_SRC
{"name": "world"}
#+END_SRC

The result:

#+BEGIN_SRC
hello world
#+END_SRC

** Basics

You specify each template command on one line. The command 
applies to the current line, next line or next block of
lines (the replacement block) depending on the command.

You use variables in brackets to mark locations in the
replacement block for replacement. These variables typically get
replaced by their associated json value.

You can use two types of json files, a server json file and
shared json file.  The server json comes from the server and does
not contain any presentation markup. The shared json, maintained
by the template builder, contains shared presentation markup.

Since the template commands are encoded as comments, the template
file looks like a native file and you can view, edit, validate,
etc. the file with its normal tools. You develop templates as if
they were static pages.

** Commands

StaticTea has four commands:

- nextline — make substitutions in the next line 
- block — make substitutions in the next block of lines
- replace — replace a block of lines
- # — comment

*** Nextline Command

The nextline command tells the template system that the next line
in the file has variable content.  The content comes from a
variable that you wrap with brackets.

In the following example there are two variables, the 
drink and drinkType variables:

#+BEGIN_SRC
<!--$ nextline -->
Drink {drink} -- {drinkType} is my favorite.
#+END_SRC

json file:

#+BEGIN_SRC
{
  "drink": "tea",
  "drinkType": "Earl Grey""
}
#+END_SRC

result:

#+BEGIN_SRC
Drink tea -- Earl Grey is my favorite.
#+END_SRC

*** Block Command 

The block command targets multiple lines for replacement. The
block starts after the command and continues until another block
line is found. It behaves like the nextline command except with
multiple lines.

In the following example the block has two lines. The block
contains three replacement variables, weekday, name and time.

template:

#+BEGIN_SRC
<!--$ block -->
Join our tea party on {weekday} at
{name}'s house at {time}.
<!--block -->
#+END_SRC

json:

#+BEGIN_SRC
{
  "weekday": "Friday",
  "name": "John",
  "time": "5:00 pm"
}
#+END_SRC

result:

#+BEGIN_SRC
Join our tea party on Friday at
John's house at 5:00 pm.
#+END_SRC

*** Replace Command 

The replace command replaces the replacement block with a
variable's value.

The lines in the block mirror the variable so you can
test the template as if it was a static file.

The command is useful for sharing common template lines between
templates and it has the special property that you can update the
replacement block to keep it in sync with the variable.

The following example shares a common header between templates.

template:

#+BEGIN_SRC
<!--$ replace t.content=s.header -->
<!--$ replace -->
#+END_SRC

json:

#+BEGIN_SRC
{
  "header": "<!doctype html>\n<html lang="en">\n"
}
#+END_SRC

result:

#+BEGIN_SRC
<!doctype html>
<html lang="en">
#+END_SRC

The above example doesn’t work as a static template because the
template is missing the header lines.

You can fix this by adding the header lines inside the replace
block. The inside lines do not appear in the result, just the
data from the json variable.

template:

#+BEGIN_SRC
<!--$ replace t.content=s.header -->
<!doctype html>
<html lang="en">
<!--$ replace -—>
#+END_SRC

The template replacement block may get out of sync with the
variable.  You can update the replacement block to match the
variable with the update option.

The following example updates the mytea.html template's
replacement blocks to match their variables in the shared.json file:

#+BEGIN_SRC
statictea --update --shared shared.json --template mytea.html
#+END_SRC

*** Comment Command

You can comment templates.  Comments are line based and use the #
character. They do not appear in the result.

template:

#+BEGIN_SRC
<!--$# This is a comment. -->
<!--$ # This is a comment. -->
hello again
#+END_SRC

result:

#+BEGIN_SRC
hello again
#+END_SRC

** Types
*** Variables

The json file contain variables.  The keys are variable names and
their value becomes part of the template when they are
used. Internally two json namespace exists, one for the shared
json and one for the server json.  You access the shared json
with "s." and the server with no prefix.

StaticTea has a number of system variables. You access them in
the t namespace, by using the prefix "t.".

You can define new variables on the command's line. These
variables are local to the block and take precedence over the json
variables.

You can define any number of variables that will fit on the
line. You can put them on the end block if needed.

The variables are processed from left to right, so the last one
takes precedence when there are duplicates.

example variables:

#+BEGIN_SRC
t.row
serverVar
s.name
#+END_SRC

# Messages

When a problem is detected, a message is written to standard error
and processing continues. All issues are handled, usually by
skipping the problem.

It’s good style to change your template or json so no messages
get output.

StaticTea return code is success (0) when no message get output, else it
returns 1.

example messages:

- template.html(45): w0001: email variable is missing from server.json. 
- template.html(45): w0002: The command line's postfix is missing. 
- template.html(45): w0003: The command line doesn't have a valid
  command.
- template.html(45): w0004: unknown system variable t.asdf. 
- template.html(45): w0005: server json file not found: asdf 
- template.html(45): w0006: unable to parse server.json

*** Constants:

**** TODO are these needed?
- 0
- 1
- _true
- _false

*** Strings 

You define a string using single or double quotes.

example strings:

#+BEGIN_SRC
"this is a string"
"what's up?"
'using single quote'
#+END_SRC

*** Numbers

You can use ordinal numbers in statements. 

#+BEGIN_SRC
0, 1, 2, 3,...
#+END_SRC

*** System Variables 

- t.list - the list used to repeat a the block for each elements
  in the list
- t.content - the content of a replace block
- t.maxLines - the maximum number of lines before the block ends.
- t.result - where the block goes, either the result file,
  standard out or no where.

**** List Variable 

The list variable causes the line or block to be duplicated for
each item in a list from the json file.  The json list contains a
dictionary for each item.

For the following example, the list statement says to use
email_list key. The result has two lines.

template:

#+BEGIN_SRC
<!--$ nextline _list = email_list -->
Mail support at {email}.
#+END_SRC

json:

#+BEGIN_SRC
{
"email_list": [
    {"email": "steve@flenniken.net"},
    {"email": "webmaster@google.com"}
  ]
}
#+END_SRC

result:

#+BEGIN_SRC
Mail support at steve@flenniken.net.
Mail support at webmaster@google.com.
#+END_SRC

**** Max Lines Variable

StaticTea reads lines looking for the terminating line a block or
replace command. By default if the terminator is not found in 10
lines, the 10 lines are used for the block and a warning is
output.  You can specify other values with the _max_lines
variable.

#+BEGIN_SRC
<!--$ block _max_lines=20 -->
#+END_SRC

**** Result Variable

The system result variable determines where the result goes.  By
default it goes to the result file. You can also direct it to
standard out or skip it.

Result variable options:

- "resultFile" - send the replacement block to the file (default)
- "skip" - skip the block
- "stderr" - send the block to standard error

The skip case is good for building test lists.  The stderr case
is good for communicating that the json data is unexpected.

When you view the following template fragment in a browser it
shows one item in the list.

template:

#+BEGIN_SRC
<h3>Tea</h3>
<ul>
<!--$ nextline t.list = teaList -->
  <li>{tea}</li>
</ul>
#+END_SRC

To create a static page that has more products for better testing
you could use the skip option like this:

template:

#+BEGIN_SRC
<h3>Tea</h3>
<ul>
<!--$ nextline t.list = teaList -->
  <li>{tea}</li>
<!--$ block t.result = 'skip' -->
  <li>Black</li>
  <li>Green</li>
  <li>Oolong</li>
  <li>Sencha</li>
  <li>Herbal</li>
<!--$ block -->
</ul>
#+END_SRC

json:

#+BEGIN_SRC
{
  "teaList": [
    {"tea": "Chamomile"},
    {"tea": "Chrysanthemum"},
    {"tea": "White"},
    {"tea": "Puer"}
  ]
}
#+END_SRC

result:

#+BEGIN_SRC
<h3>Tea</h3>
<ul>
  <li>Chamomile</li>
  <li>Chrysanthemum</li>
  <li>White</li>
  <li>Puer</li>
</ul>
#+END_SRC

** Content Variable

The content variable defines what goes in the replace block.

** System Functions

There are three built in system functions:

- t.row
- t.if
- t.version

Functions take different numbers of parameters. If you call with
one parameters, you can drop the parentheses.

These are equivalent:

#+BEGIN_SRC
email = t.row(0)
email = t.row 0
#+END_SRC

** Version Function

You use the version function to verify that the version of
StaticTea code you are running works with your template and to
get the current version string.

The version function take to parameters, the minimum version and
the maximum version, both are optional.

If the current version is below the minimum or above the maximum,
the function outputs a message to standard out. 

You can use the function multiple times for fine grain checking.

Below is typical useage:

template:

#+BEGIN_SRC
<--$ nextline version=t.version("1.2.3", "3.4.5") -->
<-- StaticTea current version is: {version}. -->
#+END_SRC

result:

#+BEGIN_SRC
<-- StaticTea current version is: 1.9.0. -->
#+END_SRC

If the current version is not between the min and max, a message
is output to standard error.  Example messages:

stdout:

#+BEGIN_SRC
template(line): the current version 4.0.2 is greater than the maximum
allowed verion of 3.4.5.

template(line): the current version 1.0.0 is less than the minumum
allowed verion of 1.2.3.
#+END_SRC

*** If Function 

You can use an if statement in a template. 

The general form of the if statement has three variable
parameters.  If the first variable is true, the second variable
is returned, else the third variable is returned.

You can drop the third and second parameters and there are
defaults for each case.

When you drop both, 0 or 1 is returned. 

template:

#+BEGIN_SRC
<--$ block var1 = t.if (cond0 t f) var2 = t.if (cond0 t) var3 = t.if (cond0) -->
cond0 = {cond0}, cond1 = {cond1}
t = {true}, f = {false}

var1 = {var1}, var2 = {var2}, var3 = {var3}
var4 = {var4}, var5 = {var5}, var6 = {var6}

<--$ block var4 = t.if (cond1 t f) var5 = t.if (cond1 t) var6 = t.if (cond1) -->
#+END_SRC

json:

#+BEGIN_SRC
{
  "cond0": 0,
  "cond1": 1,
  "t": "true",
  "f": "false",
}
#+END_SRC

result:

#+BEGIN_SRC
cond0 = 0, cond1 = 1
t = true, f = false

var1 = false, var2 = 0, var3 = 0
var4 = true, var5 = true, var6 = 1
#+END_SRC








** t.list example

The following example builds a select list of cars where one car is selected.

template:

#+BEGIN_SRC
<h4>Car List</h3>
<select>
<!--$ nextline t.list=car_list current=t.if( selected 'selected="selected"') -->
  <option{current}>{car}</option>
</select>
#+END_SRC

json:

#+BEGIN_SRC
{
"car_list": [
    {"car": "vwbug"},
    {"car": "corvete"},
    {"car": "mazda"},
    {"car": "ford pickup"},
    {"car": "BMW", "selected": 1},
    {"car": "Honda"}
  ]
}
#+END_SRC

result:

#+BEGIN_SRC
<h3>Car List</h3>
<select>
  <option>vwbug</option>
  <option>corvete</option>
  <option>mazda</option>
  <option>ford pickup</option>
  <option selected="selected">BMW</option>
  <option>Honda</option>
</select>
#+END_SRC

*** Row Function

The special row function contains the row of the current list. You control the start number. 

- row — starts at 0
- _row 0 — starts at 0
- _row 1 — starts at 1
- _row N — starts at N where N is some ordinal number. 

Here is an example using the row variable.

template:

#+BEGIN_SRC
<!--$ nextline t.list=car_list -->
<li>{t.row 1}. {car}</li>
#+END_SRC

json:

#+BEGIN_SRC
{
  "car_list": [
    {"car": "Tesla"},
    {"car": "Ford"}
  ]
}
#+END_SRC

result:

#+BEGIN_SRC
<li>1. Tesla</li>
<li>2. Ford </li>
#+END_SRC

** Template Prefix Postfix 

You specify the template commands as comments for the type of
result file. This allows you to edit the template using its
native editor.  For example, you can edit an html template with
an html editor.

Comment syntax varies depending on the type of template file and
sometimes depending on the location within the file. StaticTea
supports several varieties and you can specify others.

You want to distinguish StaticTea commands from normal
comments. The convention is to add a $ as the last character of
the prefix and only use $ with StaticTea commands and space for
normal comments.

- `<!--$ ... -->` for html
- `/*--$... --*/` for javascript in html
- `&lt;!--$... --&gt;` for textarea elements

You can define other comment types on the command line using the
prepost option one or more times.

You separate the prefix from the postfix with a space and the
postfix is optional.

examples:

#+BEGIN_SRC
statictea--prepost "@$" "|"
statictea--prepost "[comment$" "]"
statictea--prepost "#$"
#+END_SRC

** Json Files

There are two types of json files the server json and the shared
json.

The server json comes from the server and doesn’t contain any
presentation data.

The share json is used by the template builder to share common
template lines and it contains presentation data.

The server json file is included with the "-server" option.  Its
variables are referenced with the json key names.

The shared json file is specified with the "—shared" option. Its
variables are referenced with the "s." namespace.

You can specify multiple files of both types. Internally there is
one dictionary for the server and one for the shared. The files
get added from left to right so the last duplicate variable wins.

** Warnings and Defaults

When StaticTea encounters an error, it outputs a message to
standard error and continues.  It skips the element with the
problem using some default.

For example, if a variable in a block is used but it doesn't
exist, the variable remains as is and a message is output telling
the line and variable missing.


Note: when a variable is missing, empty or not a string, it is
treated as a empty string.

When the postfix is missing, the line command is still used, but
a warning message is output.


** Run StaticTea

You run StaticTea from the command line. The example below shows
a typical invocation. You specify four file parameters, the
server json, the shared json the template and the result.

#+BEGIN_SRC
statictea --server server.json --shared shared.json --template template.html --result result.html
#+END_SRC

- Warning messages go to standard error.
- If you don't specify the result parameter, the result goes to
standard out.
- It you specify "stdin" for the template, the template comes
  from stdin.

** Options

The StaticTea command line options:

- help - show the usage and options.
- version -outputs the version number to standard out and exits.
- server - the server json file. You can specify multiple files.
- shared - the shared json file. You can specify multiple files.
- update - update the template replace blocks.

** Template Specification

#+BEGIN_SRC
template = [line]*
line = prefix os commands os postfix
s = [" " | tab]+
os = [" " | tab]*

commands = nextline | block | comment | skip | shared

skip = .*
comment = "#" .*
nextline = "nextline" [s variable ]*
block = "block" [s variable ]*
shared = "shared" [s variable]+

list = "_list" os "=" os right_side 

variable = "{" os name os "}"

name = key | row
row = "_row" [0-9]+
key =  ["_shared" s] [a-zA-Z]+[a-zA-Z0-9_]*


replace = key os "=" os right_side
right_side = name | string | if

string = "_string(" .* ")"
 if = "_if" s name s name s name

#+END_SRC


#+BEGIN_SRC
nextline {email}
nextline {_row 78}
nextline {_shared header}
nextline {email = "hello"}
nextline {email = steve_email}
nextline {email = _if admin one two}
#+END_SRC

** Tea References in Examples.

  Use pictures too. teapot, Japanese tea hut

** TODO test all examples.
** TODO Output to standard out when the result option is missing.
** TODO Output warnings to standard error.
** TODO Use the t namespace for system symbols.
** TODO Use the s namespace for the shared json.
** TODO Use the d namespace (or nothing) for the server json.
** TODO Access items in the namespace with a dot, i.e.:
   t.list, t.maxLines, etc
** TODO Use standard in when the template parameter is called stdin.
** TODO Errors on the command line use line(0) to standard out.
** TODO Set error code
** add version command: version minVersion maxVersion
The version outputs a warning when the current version is outside
the range.
** TODO add version variable: t.version
** TODO add warning command? 
or command statement?  these go to standard error with normal replacement behavior.


StaticTea processes the template one line at a time with one pass
through the file and it only needs to keep the current

It only keeps the current replacement lines in memory so it can
handle large template files with little resources.
