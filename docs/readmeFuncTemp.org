# $ # StaticTea template for generating the function doc section for the readme.

* StaticTea Template

** TODO Lower case function names.
** TODO Use "# $" for the prefix.
** TODO Sort the functions alphabetically.
** TODO Increase t.maxLines to 50?

# $ #
# $ # Define replacement patterns to remove formatting from the descriptions.
# $ block
# $ : t.maxLines = 20
# $ : g.patterns = list( +
# $ :   '~~~~', '#+END_SRC', +
# $ :   '~~~', '#+BEGIN_SRC', +
# $ :   '\* ', '- ', +
# $ :   "@@", '', +
# $ :   "@\|", '[', +
# $ :   "\|@", ']', +
# $ :   "[ ]*@:", h.newline, +
# $ :   "&quot;", '"', +
# $ :   "&gt;", '>', +
# $ :   "&lt;", '<', +
# $ :   "&amp;", '&')
# $ endblock
# $ #
* Functions
:PROPERTIES:
:CUSTOM_ID: functions
:ORDERED:  t
:END:

Functions allow you to format variables for presentation.  They
return a value that you assign to a variable or pass to another
function.

The function sections below were extracted from the nim source
code with a StaticTea template.

New functions get added over time. the function documentation
tells which version it appears so you know which version of
statictea to require.

List of functions:

# $ # Generate the function index.
# $ nextline
# $ : t.repeat = len(s.entries)
# $ : entry = get(s.entries, t.row, dict())
# $ : skip = case(entry.type, "skFunc", 0, 1)
# $ : pos = find(entry.name, "fun", -1)
# $ : skip2 = case(pos, 0, 0, 1)
# $ : t.output = case(add(skip, skip2), 0, "result", "skip")
# $ : name = case(pos, 0, substr(entry.name, 3), "")
# $ : desc = replaceRe(entry.description, g.patterns)
# $ : shortFuncDesc = substr(desc, 0, add(find(desc, '.', -1), 1))
- [[#{name}][{name}()]] -- {shortFuncDesc}

# $ # Generate the function sections.
# $ block
# $ : t.repeat = len(s.entries)
# $ : entry = get(s.entries, t.row, dict())
# $ : skip = case(entry.type, "skFunc", 0, 1)
# $ : pos = find(entry.name, "fun", -1)
# $ : skip2 = case(pos, 0, 0, 1)
# $ : t.output = case(add(skip, skip2), 0, "result", "skip")
# $ : name = case(pos, 0, substr(entry.name, 3), "")
# $ : description = replaceRe(entry.description, g.patterns)
[[#contents][èŒ¶]]

** {name}()
:PROPERTIES:
:CUSTOM_ID: {name}
:END:

{description}

# $ endblock
