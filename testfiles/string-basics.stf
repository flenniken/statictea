id stf file version 0.0.0

## This stf file is used as a template by the newstf nimble task.

# Here are the file line attributes:
#   noLastEnding command nonZeroReturn

--- file cmd.sh command
$statictea \
  -l=log.txt \
  -s=server.json \
  -j=shared.json \
  -t=tmpl.txt \
  -r=result.html >stdout 2>stderr
--- endfile



# Run a command over the log file that removes the time prefix then
# extracts the lines generates by template commands ignoring the lines
# generated by the system.
--- file log.sh command
cat log.txt | cut -c 26- | grep "^tmpl.txt" >log.filtered | true
--- endfile

# The following commented out line can be used to remove the time and
# filename prefix from the log lines. Use it in place of the other
# log.sh command.
# cat log.txt | sed 's/^.*); //' >log.filtered

--- file tmpl.txt

String readme example.

  A string is an immutable sequence of unicode characters. You
  define a literal string with double quotes.

$$ block str = "You can store black teas longer than green teas."
str => {str}
$$ endblock

Create an empty string, one with one character and one with two characters.
$$ block
$$ : a = ""
$$ : b = "1"
$$ : c = "12"
a => '{a}'
b => '{b}'
c => '{c}'
$$ endblock

Continue a long string.
$$ block str = "This is a long string 1+
$$ :        2 split between lines"
$$ : str2 = "This is a long string 1       2 split between lines"
str  => '{str}'
str2 => '{str2}
$$ endblock

Continue a long string with spaces.
$$ nextline str = " a b c +
$$ : d e f+
$$ :  g h i"
{str}
 a b c d e f g h i
--- endfile

--- file server.json
{
  "name": "server",
  "type": "json"
}
--- endfile

--- file shared.json
{
  "name": "shared",
  "type": "json"
}
--- endfile

--- file result.expected

String readme example.

  A string is an immutable sequence of unicode characters. You
  define a literal string with double quotes.

str => You can store black teas longer than green teas.

Create an empty string, one with one character and one with two characters.
a => ''
b => '1'
c => '12'

Continue a long string.
str  => 'This is a long string 1       2 split between lines'
str2 => 'This is a long string 1       2 split between lines

Continue a long string with spaces.
 a b c d e f g h i
 a b c d e f g h i
--- endfile

--- file stdout.expected
--- endfile

--- file stderr.expected
--- endfile

--- file log.filtered.expected
--- endfile

--- file log.txt.expected
--- endfile

--- expected stdout.expected == stdout
--- expected stderr.expected == stderr
--- expected log.filtered.expected == log.filtered
#--- expected log.txt.expected == log.txt
--- expected result.expected == result.html
