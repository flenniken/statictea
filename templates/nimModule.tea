# Nim code file for use by nimModule.md.

# Define replacement patterns to remove formatting from the descriptions.
patterns = list( +
  "~~~~", "~~~", +
  "@@", "", +
  "@{", "[", +
  "}@", "]", +
  "@!", "|", +
  "[ ]*@:", "\n", +
  "@\\.", "*", +
  "&quot;", "\"", +
  "&gt;", ">", +
  "&lt;", "<", +
  "&amp;", "&")

get-name = func(ix: int, entry: dict, newList: list) bool
  ## Add the entry name to the list.
  newList &= entry.name
  return(false)

# Create the github anchors for all the heading names.
names = []
stopped2 = listLoop(s.entries, names, l.get-name)

# Use the anchor type depending on the result type (extension).
path = path(t.args.resultFilename)
type = if((path.ext == ".md"), "github", "html")
anchors = anchors(names, type)

# Use the filename's basename for the module name.
orig-path = path(s.orig)
o.moduleName = orig-path.filename

textDesc = replaceRe(s.moduleDescription, patterns)

# For html, parse the markdown and turn it into html paragraphs,
# bullet lists and code blocks.


# elements = markdownLite(textDesc)


o.moduleDescription = textDesc

get-entry = func(ix: int, entry: dict, newList: list, state: dict) bool
  ## Reformat the entry and add it to the new list.
  newEntry = dict()
  newEntry.name = entry.name

  # Set the entry type to: type, const, macro or "".
  cases = list(+
    "skType", "type: ", +
    "skConst", "const: ", +
    "skMacro", "macro: ")
  newEntry.type = case(entry.type, cases, "")

  # Remove the formatting from the description and use the first
  # sentence for the short description.
  desc = get(entry, "description", "")
  sentence = slice(desc, 0, add(find(desc, ".", -1), 1))
  newEntry.short = replaceRe(sentence, state.patterns)
  newEntry.description = replaceRe(desc, state.patterns)

  # Simplify the code signature.
  code = replaceRe(entry.code, list("[ ]*$", ""))
  pos = find(code, " {", len(code))
  newEntry.signature = slice(code, 0, pos)

  newEntry.anchor = state.anchors[ix]

  newList &= newEntry

  return(false)

# Reformat the entries list and store it in o.entries.
state = dict()
state.patterns = patterns
state.anchors = anchors
o.entries = []
stopped = listLoop(s.entries, o.entries, l.get-entry, state)
