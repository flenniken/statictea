## Reformat the list of server function dictionaries (s.entries) and
## return them as o.entries.  Tea code file for use by templates
## nimModule.md and nimModule.html.

## The nimble tasks docm and doch run the template.

u.handle-html-bullet = func(ix: int, bullet: string, lines: list) bool
  ## Make the bullet text into an html bullet and add it to lines.
  lines &= join(["<li>", html(bullet, "body"), "</li>"], "")
  return(false)

u.html-paragraph = func(item: list) string
  ## Return html given a "p" element md list.
  return(join(["<p>", html(item[0], "body"), "</p>"], ""))

u.handle-html-fragment = func(ix: int, fragment: list, frags: list) bool
  ## Highlight the fragment for html and add it to the frags list.
  tag = fragment[0]
  str = html(fragment[1], "body")
  # Wrap each fragment with a span element except the "other" element.
  frags &= if((tag == "other"), str, +
    format("<span class=\"t-{tag}\">{str}</span>"))
  return(false)

u.handle-plain-code = func(codeBlock: string, frags: list) bool
  ## Add the plain code block (not tea code) to the frags list.
  frags &= html(codeBlock, "body")
  return(false)

u.html-code = func(item: list) string
  ## Format the "code" md element list as html.
  lines = []
  teaCode = find(item[0], "statictea", -1)
  class = if((teaCode == -1), "plain-code", "tea-code")
  lines &= format("<pre class=\"{class}\">\n")

  codeBlock = item[1]
  ret = if((class == "tea-code"), +
    listLoop(highlight(codeBlock), lines, u.handle-html-fragment), +
    u.handle-plain-code(codeBlock, lines))
    
  lines &= "</pre>\n"
  return(join(lines, ""))

u.html-bullets = func(item: list) string
  ## Format the "bullets" md element list as html.
  lines = []
  lines &= "<ul>\n"
  listLoop(item, lines, u.handle-html-bullet)
  lines &= "</ul>\n"
  return(join(lines, ""))

u.handle-html-element = func(ix: int, element: list, lines: list) bool
  ## Format the md element as html and add it to lines.
  l.fn = case(element[0], [ +
    "p", u.html-paragraph, +
    "code", u.html-code, +
    "bullets", u.html-bullets +
  ])
  lines &= l.fn(element[1])
  return(false)

u.get-html-description = func(mdDescription: string) string
  ## Parse the description markdown text and return html paragraphs,
  ## bullet lists and code blocks.
  elements = markdownLite(mdDescription)
  lines = []
  listLoop(elements, lines, u.handle-html-element)
  return(join(lines, ""))

u.get-name = func(ix: int, entry: dict, newList: list) bool
  ## Add the entry name to the list.
  newList &= entry.name
  return(false)

u.fixup-description = func(mdDescription: string, templateType: string) dict
  ## Fix up the description for html or markdown.  For the html
  ## template convert the markdown to html. For the md template
  ## replace the statictea code blocks with javascript so the code is
  ## highlighted by github.

  # Use the first sentence for the short description.
  first = slice(mdDescription, 0, add(find(mdDescription, ".", -1), 1))
  short = replaceRe(first, ["\n", " "])

  # Convert the markdown description to html for the html
  # template. For md switch statictea code blocks to javascript.
  description = if((templateType == "html"), +
    u.get-html-description(mdDescription), +
    replaceRe(mdDescription, ["~~~\\s*statictea", "~~~javascript"]))

  # Return both the full discription and the short form.
  ret = dict()
  ret.description = description
  ret.short = short
  return(ret)

u.get-entry = func(ix: int, entry: dict, newList: list, state: dict) bool
  ## Reformat the entry and add it to the new list.
  newEntry = dict()
  newEntry.name = entry.name

  # Set the entry type to: type, const, macro or "".
  cases = list(+
    "skType", "type: ", +
    "skConst", "const: ", +
    "skMacro", "macro: ")
  newEntry.type = case(entry.type, cases, "")

  # Remove the special formatting from the description and encode it
  # for html or markdown.
  rawDescription = get(entry, "description", "")
  ret = u.fixup-description(rawDescription, state.templateType)
  newEntry.description = ret.description
  newEntry.short = ret.short

  # Simplify the nim signatures by removing empty raises list and
  # empty tags list. Leave the lists that contain something.
  junk = "\\s*{\\.\\s*raises:\\s*\\[],\\s*tags:\\s*\\[]\\.}"
  newEntry.signature = replaceRe(entry.code, list(junk, "", "\n*\\s*$", ""))

  newEntry.anchor = state.anchors[ix]
  newList &= newEntry
  return(false)

# Determine the template type from the template's extension.
path = path(t.args.resultFilename)
templateType = if((path.ext == ".md"), "github", "html")

# Create the link anchors for all the heading names.
names = []
listLoop(s.entries, names, u.get-name)
anchors = anchors(names, templateType)

# Use the filename without path info for the module name.
origPath = path(s.orig)
o.moduleName = origPath.filename

# Format the description for html or markdown.
ret = u.fixup-description(s.moduleDescription, templateType)
o.moduleDescription = ret.description

# Reformat the server entries list and store it in o.entries.
state = dict()
state.anchors = anchors
state.templateType = templateType
o.entries = []
listLoop(s.entries, o.entries, u.get-entry, state)
