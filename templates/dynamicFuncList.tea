# Statictea code file for functionsList.nim template.

get-starts = func(ix: int, entry: dict, starts: dict, entries: list) bool
  ## Collect the a function's start line and number of lines.
  start = entry.line

  # Calculate the number of lines by the difference between the
  # current start line and the next one.
  next-entry = get(entries, add(ix,1), dict())
  next = get(next-entry, "line", 100)
  numLines = sub(next, start)

  key = concat("k", string(start))
  starts[key] = numLines
  return(false)

# Make a dictionary mapping a function's start line to its number of lines.
starts = dict()
dummy = listLoop(s.entries, starts, l.get-starts, s.entries)

get-entry = func(ix: int, entry: dict, newList: list, state: dict) bool
  ## Add the Statictea functions to the new list.

  # Add entries that are functions that begin with "fun_", skip the
  # others.
  if((entry.type != "skFunc"), return(false))
  if(not(startsWith(entry.name, "fun_")), return(false))

  newEntry = dict()
  newEntry.funcName = entry.name

  # Remove the formatting from the description.
  desc = get(entry, "description", "")
  newEntry.docComment = replaceRe(desc, state.patterns)

  newEntry.lineNum = entry.line
  newEntry.numLines = state.starts[concat("k", string(entry.line))]
  newList &= newEntry
  return(false)


# Define replacement patterns to remove formatting from the doc
# comments (descriptions).

patterns = list( +
  "~~~~", "~~~", +
  "@@", "", +
  "@{", "[", +
  "}@", "]", +
  "@!", "|", +
  "[ ]*@:", "\n", +
  "@\\.", "*", +
  "&quot;", "\"", +
  "&gt;", ">", +
  "&lt;", "<", +
  "&amp;", "&")

# Create a list of the statictea functions.
state = dict()
state.patterns = patterns
state.starts = starts
entries = []
stopped = listLoop(s.entries, entries, l.get-entry, state)

# Sort the entries by function name. Use insensitive compare so
# function cmp_ comes before cmpV.
o.entries = sort(entries, "ascending", "insensitive", "funcName")
