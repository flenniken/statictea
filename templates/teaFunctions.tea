## Create a list of dictionaries (o.entries), one dictionary for each
## function in the f function dictionary.  Each dictionary entry
## contains, function name, doc comment, anchor name and the first
## sentence. The nimble task teafuncsh runs the template.

u.add-func-var = func(ix: int, funcVar: func, newList: list) bool
  ## Add the given function variable to the list.
  newList &= funcVar
  return(false)

add-vars = func(ix: int, key: string, newList: list) bool
  ## Add all the func variables with the given key name to the new
  ## list.
  funcList = f[key]
  loop(funcList, newList, u.add-func-var)
  return(false)

get-name = func(ix: int, funcVar: func, newList: list) bool
  ## Add the function name to the new list.
  fd = functionDetails(funcVar)
  newList &= fd.signature.name
  return(false)

make-entry = func(ix: int, funcVar: func, newList: list, state: dict) bool
  ## Make a dictionary of function details for the given function
  ## variable and add it to the new list. Each entry contains the name
  ## of the function, its anchor name, its description, and the first
  ## sentence of the description.

  entry = dict()

  # Get the function name from the function variable.
  fd = functionDetails(funcVar)
  entry.name = fd.signature.name

  # Format the description for the template type, either markdown or
  # html.
  dest = u.format-md-description(fd.docComment, state.templateType)
  entry.description = dest.description
  entry.sentence = dest.sentence

  # Get the anchor name for the function. The name is dependent on its
  # order.
  entry.anchorName = state.anchors[ix]
  newList &= entry
  return(false)

# Create a flat list of all the function variables in the f
# dictionary.
flatFuncList = []
loop(keys(f), flatFuncList, add-vars)

# Determine the template type from the template's extension.
path = path(t.args.resultFilename)
templateType = if((path.ext == ".md"), "github", "html")

# Get a list of all the function names then make that into anchor
# names.
names = []
loop(flatFuncList, names, get-name)
anchors = anchors(names, templateType)

# Create a list of dictionaries, one dictionary for each function
# variable in the f function dictionary.  Each dictionary contains,
# the function name, doc comment, anchor name and a short description.
state = dict()
state.anchors = anchors
state.templateType = templateType
o.entries = []
loop(flatFuncList, o.entries, make-entry, state)
