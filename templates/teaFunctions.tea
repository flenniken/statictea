# Create a list of dictionaries (o.entries), one dictionary for each
# function in the f function dictionary.  Each dictionary contains,
# the function name, doc comment, anchor name and a short description.

u.add-func-var = func(ix: int, funcVar: func, newList: list) bool
  ## Add the function variable to the list.
  newList &= funcVar
  return(false)

add-vars = func(ix: int, key: string, newList: list) bool
  ## Add all the func variables with the key name to the new list.
  funcList = f[key]
  listLoop(funcList, newList, u.add-func-var)
  return(false)

# Create a flat list of all the function variables in the f
# dictionary.
flatFuncList = []
listLoop(keys(f), flatFuncList, add-vars)

get-name = func(ix: int, funcVar: func, newList: list) bool
  ## Add the function name to the new list.
  fd = functionDetails(funcVar)
  newList &= fd.signature.name
  return(false)

# Get the anchor type based on the template type.
path = path(t.args.resultFilename)
type = if((path.ext == ".md"), "github", "html")

# Get a list of all the function names then make that into anchor
# names.
names = []
listLoop(flatFuncList, names, get-name)
anchors = anchors(names, type)

make-entry = func(ix: int, funcVar: func, newList: list, anchors: list) bool
  ## Make a dictionary of function details for the given function
  ## variable and add it to the new list.

  # Look up the function details.
  fd = functionDetails(funcVar)

  # Make a dictionary containing the function name, its doc comments
  # and its doc comment's first sentence.
  entry = dict()
  entry.name = fd.signature.name
  entry.docComment = fd.docComment
  entry.sentence = slice(fd.docComment, 0, add(find(fd.docComment, ".", -1), 1))
  entry.anchorName = anchors[ix]
  newList &= entry
  return(false)

# Create a list of dictionaries, one dictionary for each function
# variable in the f function dictionary.  Each dictionary contains,
# the function name, doc comment, anchor name and a short description.
o.entries = []
listLoop(flatFuncList, o.entries, make-entry, anchors)
